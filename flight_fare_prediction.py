# -*- coding: utf-8 -*-
"""Flight_Fare_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uN2xU-ie1A043DRSD3U9dgl2tpUroyIQ
"""

! pip install word2number

import numpy as np
import pandas as pd
from word2number import w2n
from sklearn.model_selection import train_test_split, GridSearchCV
import matplotlib.pyplot as plt
from sklearn import metrics

data = pd.read_csv("/content/Clean_Dataset.csv", nrows = 1000)

data.head()

data.info()

data = data.drop('flight', axis=1)

data = data.drop('Unnamed: 0', axis=1)

print(data)

data.isnull().sum()

for i in range(len(data)):
  if data['stops'][i] == 'two_or_more':
    data['stops'][i] =2
  else:
    data['stops'][i] =w2n.word_to_num(data['stops'][i])

pred_data = data

data.head()

categorical_columns = ['airline', 'source_city', 'departure_time', 'arrival_time', 'destination_city', 'class']
data_encoded = pd.get_dummies(data, columns=categorical_columns)
print(data_encoded)
print(data_encoded.columns)

data_encoded.head()

X=data_encoded[data_encoded.columns[~data_encoded.columns.isin(['price'])]]

y=data_encoded['price']

X_train,X_test, y_train, y_test= train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression

linear = LinearRegression()

linear.fit(X_train, y_train)

pred=linear.predict(X_train)

from sklearn.metrics import r2_score
score = r2_score(y_train, pred)
print("The training r2-Score of linear model is {}%".format(round(score, 2) *100))

linear.score(X_train, y_train)

score_test = r2_score(X_test, y_test)
print("The test r2-Score of linear model is {}%".format(round(score_test, 2) *100))

linear.score(X_test, y_test)

"""SVR"""

from sklearn.svm import SVR
from sklearn.datasets import make_regression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as  plt

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

hyper_param_svr = {
    'kernel': ['linear', 'rbf', 'poly'],
    'C': [1, 5, 10, 100],
    'gamma': ['scale', 'auto']
}

svr = SVR()

grid_search = GridSearchCV(estimator=svr, param_grid=hyper_param_svr, cv=5, scoring='neg_mean_squared_error', verbose=1, n_jobs=-1)
grid_search.fit(X_train_scaled, y_train)

best_params_svr = grid_search.best_params_
best_estimator_svr = grid_search.best_estimator_

print("Best Parameters for SVR:", best_params_svr)

svr_pred = best_estimator_svr.predict(X_test_scaled)

svr_score_train = best_estimator_svr.score(X_train_scaled, y_train)

print("The training r2-Score of SVR model is {}%".format(round(svr_score_train, 2) *100))

svr_score_test = best_estimator_svr.score(X_test_scaled, y_test)

print("The test r2-Score of SVR model is {}%".format(round(svr_score_test, 2) *100))

"""Random Forest Regressor"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.preprocessing import LabelEncoder

random_forest = RandomForestRegressor()

hyper_param_RForest = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 5, 10, 15],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search_r = GridSearchCV(estimator=random_forest, param_grid=hyper_param_RForest, cv=5, scoring='neg_mean_squared_error', verbose=1, n_jobs=-1)
grid_search_r.fit(X_train, y_train)

best_params_r = grid_search_r.best_params_
best_estimator_r = grid_search_r.best_estimator_

print("Best Parameters for Random Forest Regressor:", best_params_r)

for_pred = best_estimator_r.predict(X_test)

forest_score_train = best_estimator_r.score(X_train, y_train)

print("The training r2-Score of Random Forest Regressor model is {}%".format(round(forest_score_train, 2) *100))

forest_score_test = best_estimator_r.score(X_test, y_test)

print("The test r2-Score of Random Forest Regressor model is {}%".format(round(forest_score_test, 2) *100))

"""XGBoost"""

from xgboost import XGBRegressor

xgb_reg = XGBRegressor()

xgb_reg.fit(X_train, y_train)

y_pred = xgb_reg.predict(X_test)

test = pd.DataFrame({
    'airline': ['SpiceJet'],
    'source_city': ['Delhi'],
    'departure_time': ['Evening'],
    'stops': ['zero'],
    'arrival_time': ['Night'],
    'destination_city': ['Mumbai'],
    'class': ['Economy'],
    'duration': [2.17],
    'days_left': [1]
})

pred_data=pred_data.append({
    'airline': 'SpiceJet',
    'source_city':'Delhi',
    'departure_time': 'Evening',
    'stops': 1,
    'arrival_time': 'Night',
    'destination_city': 'Mumbai',
    'class': 'Economy',
    'duration': 2.17,
    'days_left': 1
},ignore_index=True)

print(pred_data)

print(pred_data)

pred_data.isnull().sum()

categorical_columns = ['airline', 'source_city', 'departure_time', 'arrival_time', 'destination_city', 'class']
test_encoded = pd.get_dummies(pred_data, columns=categorical_columns)
print(test_encoded)
print(test_encoded.columns)



a=test_encoded[test_encoded.columns[~test_encoded.columns.isin(['price'])]]

b=test_encoded['price']

a

b

l = a.iloc[-1]

l.head()

linear.predict(l)

